'''1021번 회전하는 큐
문제
지민이는 N개의 원소를 포함하고 있는 양방향 순환 큐를 가지고 있다. 지민이는 이 큐에서 몇 개의 원소를 뽑아내려고 한다. 지민이는 이 큐에서 다음과 같은 3가지 연산을 수행할 수 있다.

1. 첫 번째 원소 popleft / 원래 큐의 원소가 a1, ..., ak이었던 것이 a2, ..., ak와 같이 된다.
2. 왼쪽으로 한 칸씩 rotate(-1) / a1, ..., ak가 a2, ..., ak, a1이 된다.
3. 오른쪽으로 한 칸씩 rotate(1) / a1, ..., ak가 ak, a1, ..., ak-1이 된다.

큐에 처음에 포함되어 있던 수 N이 주어진다. 그리고 지민이가 뽑아내려고 하는 원소의 위치가 주어진다. (이 위치는 가장 처음 큐에서의 위치이다.) 이때, 그 원소를 주어진 순서대로 뽑아내는데 드는 2번, 3번 연산의 최솟값을 출력하는 프로그램을 작성하시오.

입력
첫째 줄에 큐의 크기 N과 뽑아내려고 하는 수의 개수 M이 주어진다. N은 50보다 작거나 같은 자연수이고, M은 N보다 작거나 같은 자연수이다. 둘째 줄에는 지민이가 뽑아내려고 하는 수의 위치가 순서대로 주어진다. 위치는 1보다 크거나 같고, N보다 작거나 같은 자연수이다.'''
'''
10 3
1 2 3   >> 0
10 3
2 9 5   >> 8'''
# 길이 10 에서 2, 9, 5 숫자가 맨 앞으로 오기 전까지 가장 많이 2, 3번 과정을 겪은 숫자들을 모아서 가장 작은 수를 출력한다.

# 2 # 9 # 5
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 원래 모습 
# 원하는 정수가 맨 앞에 오는 시점에서의 cnt를 출력한다.

## 2 찾기
#2 [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]  cnt = 1

## 9 찾기
# 정수 2를 뽑아내고 그 다음에 다시 그 상태 그대로 정수 9를 찾아가는 건가?
# [3, 4, 5, 6, 7, 8, 9, 10, 1] 원래 모습
#3 [1, 3, 4, 5, 6, 7, 8, 9, 10]  cnt = 1
#3 [10, 1, 3, 4, 5, 6, 7, 8, 9]  cnt = 2
#3 [9, 10, 1, 3, 4, 5, 6, 7, 8]  cnt = 3

## 5 찾기 2번/3번 어느 방향으로든 4회 만에 도착한다.
# [10, 1, 3, 4, 5, 6, 7, 8] 원래 모습
#2 [1, 3, 4, 5, 6, 7, 8, 10]  cnt = 1
#2 [3, 4, 5, 6, 7, 8, 10, 1]  cnt = 2
#2 [4, 5, 6, 7, 8, 10, 1, 3]  cnt = 3
#2 [5, 6, 7, 8, 10, 1, 3, 4]  cnt = 4

import sys
from collections import deque
# sys.stdin = open("input.txt", "r")

N, M = map(int,input().split())
numbers = deque(list(map(int,input().split())))
Q = deque([ n for n in range(1,N+1)])
cnt = 0

# for n in numbers:
while True:
    if len(Q) == N - M:
        break
    else:
        n = numbers[0]
        if Q[0] == n:
            Q.popleft()
            numbers.popleft()
        elif len(Q)//2 >= Q.index(n):   # 중간보다 앞쪽에 있다면
            Q.rotate(-1)    # 오른쪽으로 한 칸씩 rotate(1) 
            cnt += 1
        else:
            Q.rotate(1)
            cnt += 1
print(cnt)
[1,2,3,4,5,6,7,7,8].pop(0)
# 상기한 것들 외에도, 데크는 이터레이션, 피클링, len(d), reversed(d), copy.copy(d), copy.deepcopy(d), in 연산자를 사용한 멤버십 검사 및 첫 번째 요소를 액세스하는 d[0]과 같은 서브 스크립트 참조를 지원합니다. 
# 인덱스를 사용하는 액세스는 양쪽 끝에서는 O(1) 이지만 중간에서는 O(n) 으로 느려집니다. 빠른 무작위 액세스를 위해서는 대신 리스트를 사용하십시오.

''' 리스트
리스트는 가변 시퀀스로, 일반적으로 등질 항목들의 모음을 저장하는 데 사용됩니다 (정확한 유사도는 응용 프로그램마다 다를 수 있습니다).

class list([iterable])
리스트는 여러 가지 방법으로 만들 수 있습니다:
대괄호를 사용하여 빈 리스트를 표시하기: []
대괄호를 사용하여 쉼표로 항목 구분하기: [a], [a, b, c]
리스트 컴프리헨션 사용하기: [x for x in iterable]
형 생성자를 사용하기: list() 또는 list(iterable)

생성자는 항목들과 그 순서가 iterable 과 같은 리스트를 만듭니다. iterable 은 시퀀스, 이터레이션을 지원하는 컨테이너, 이터레이터 객체가 될 수 있습니다. iterable 이 이미 리스트라면, iterable[:] 과 비슷하게 복사본을 만들어서 반환합니다. 예를 들어, list('abc') 는 ['a', 'b', 'c'] 를 반환하고 list( (1, 2, 3) ) 는 [1, 2, 3] 를 반환합니다. 인자가 주어지지 않으면, 생성자는 새로운 빈 리스트인 [] 을 만듭니다.'''